repositories {
    maven {
        url 'https://maven.fabric.io/public'
    }
}

buildscript {
    repositories {
        maven {
            url 'https://maven.fabric.io/public'
        }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: "com.android.application"
apply plugin: 'io.fabric'

import com.android.build.OutputFile
import groovy.xml.MarkupBuilder

import java.util.regex.Matcher
import java.util.regex.Pattern

import org.gradle.api.invocation.Gradle;

project.ext.envConfigFiles = [
        staging: "${project.rootDir}/../app/config/staging.env",
        production: "${project.rootDir}/../app/config/production.env",
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if(tskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    }
    else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }

    Matcher matcher = pattern.matcher(tskReqStr)

    if(matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        //return ""
        return "production" // hardcode production for now
    }
}

def getEnvironmentFilePath() {
    String currentFlavor = getCurrentFlavor().toLowerCase()
    return "${project.rootDir}/../app/config/${currentFlavor}.env";
}

android {
    compileSdkVersion 23

    buildToolsVersion '23.0.1'

    defaultConfig {
        applicationId "net.santiment.android"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 28
        versionName "0.3.10"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    // Environment file
    Properties environment = new Properties()
    environment.load(
            new FileInputStream(
                    file(
                            getEnvironmentFilePath()
                    )
            )
    )

    // Fabric
    Properties fabricProps = new Properties()
    String fabricPath = "${project.rootDir}/app/fabric.properties"
    File fabricFile = new File(fabricPath)
    fabricFile.createNewFile()
    fabricProps.load(new FileInputStream(fabricFile))
    fabricProps.setProperty("apiKey", environment['FABRIC_API_KEY'])
    fabricProps.setProperty("apiSecret", environment['FABRIC_API_SECRET'])
    fabricProps.setProperty("organization", environment['FABRIC_ORGANIZATION'])
    fabricProps.store(new FileOutputStream(fabricFile), null)
    fabricFile.withWriter { fabricProps.store(it, null) }
    // -------

    // Bugsnag
    def sw = new StringWriter()
    def xml = new MarkupBuilder(sw)
    xml.resources() {
        string(name: "BUGSNAG_API_KEY", environment['BUGSNAG_API_KEY'])
    }
    def stringsFile = new File("${project.rootDir}/app/src/main/res/values/bugsnag.xml")
    stringsFile.write(sw.toString())
    // -------

    signingConfigs {
        release {
            storeFile file(environment['ANDROID_RELEASE_KEYSTORE_PATH'])
            storePassword environment['ANDROID_RELEASE_KEYSTORE_PASSWORD']
            keyAlias environment['ANDROID_RELEASE_KEYSTORE_ALIAS']
            keyPassword environment['ANDROID_RELEASE_KEYSTORE_ALIAS_PASSWORD']
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = true
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            ext.enableCrashlytics = true
            ext.betaDistributionGroupAliases = environment['FABRIC_GROUP_ALIASES']
            ext.betaDistributionNotifications = environment['FABRIC_NOTIFY_TESTERS']

            signingConfig signingConfigs.release
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    productFlavors {
        production {
            applicationId 'net.santiment.android'
        }

        staging {
            applicationId 'net.santiment.android.stg'
        }
    }
}

dependencies {
    compile project(':react-native-charts-wrapper')
    compile project(':react-native-device-info')
    compile project(':bugsnag-react-native')
    compile project(':react-native-vector-icons')
    compile project(':react-native-config')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.facebook.react:react-native:+'
    // From node_modules
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
